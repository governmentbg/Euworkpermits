//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable CS8765 // Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes).

namespace BlueCardPortal.Infrastructure.Integrations.BlueCardCore.Contracts
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IClient
    {
        /// <summary>
        /// createApplication
        /// </summary>
        /// <remarks>
        /// Операция за регистриране на заявление по електронен път
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateApplication_output> CreateApplicationAsync(CreateApplication_input body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// createApplication
        /// </summary>
        /// <remarks>
        /// Операция за регистриране на заявление по електронен път
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateApplication_output> CreateApplicationAsync(CreateApplication_input body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// listApplications
        /// </summary>
        /// <remarks>
        /// Операция за получаване на списък с общи данни за заявления за подаден работодател
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ListApplications_output> ListApplicationsAsync(ListApplications_input body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// listApplications
        /// </summary>
        /// <remarks>
        /// Операция за получаване на списък с общи данни за заявления за подаден работодател
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ListApplications_output> ListApplicationsAsync(ListApplications_input body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// getApplication
        /// </summary>
        /// <remarks>
        /// Операция за получаване на пълните данни за заявление
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetApplication_output> GetApplicationAsync(GetApplication_input body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// getApplication
        /// </summary>
        /// <remarks>
        /// Операция за получаване на пълните данни за заявление
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetApplication_output> GetApplicationAsync(GetApplication_input body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// createComplaint
        /// </summary>
        /// <remarks>
        /// Операция за регистриране на жалба към заявление по електронен път
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateComplaint_output> CreateComplaintAsync(CreateComplaint_input body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// createComplaint
        /// </summary>
        /// <remarks>
        /// Операция за регистриране на жалба към заявление по електронен път
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateComplaint_output> CreateComplaintAsync(CreateComplaint_input body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// listComplaints
        /// </summary>
        /// <remarks>
        /// Операция за получаване на списък с общи данни за жалби към заявления на даден работодател
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ListComplaints_output> ListComplaintsAsync(ListComplaints_input body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// listComplaints
        /// </summary>
        /// <remarks>
        /// Операция за получаване на списък с общи данни за жалби към заявления на даден работодател
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ListComplaints_output> ListComplaintsAsync(ListComplaints_input body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// getComplaint
        /// </summary>
        /// <remarks>
        /// Операция за получаване на пълните данни за жалба
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetComplaint_output> GetComplaintAsync(GetComplaint_input body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// getComplaint
        /// </summary>
        /// <remarks>
        /// Операция за получаване на пълните данни за жалба
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetComplaint_output> GetComplaintAsync(GetComplaint_input body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// getNomenclatures
        /// </summary>
        /// <remarks>
        /// Операция за извличане на номенклатурни данни
        /// <br/>1. Входен параметър за данни от таблица Reference data :"BIRTH_DATE_TYPE_INPUT""INTERNAL_STATUS"
        /// <br/>"EXTERNAL_STATUS"
        /// <br/>"TYPE_IDENTIFICATION_DOCUMENT"
        /// <br/>"APPLICATION_TYPE","PERMIT_TYPE","MARITAL_STATUS","GENDER", etc.
        /// <br/>2. Входен параметър за извличане на Държави :"COUNTRIES"
        /// <br/>
        /// <br/>3. Входен параметър за извличане на Region (Области) :"REGION"
        /// <br/>
        /// <br/>4. Входен параметър за извличане на NKPD Code :"NKPD_CODE"
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetNomenclatures_output> GetNomenclaturesAsync(GetNomenclatures_input body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// getNomenclatures
        /// </summary>
        /// <remarks>
        /// Операция за извличане на номенклатурни данни
        /// <br/>1. Входен параметър за данни от таблица Reference data :"BIRTH_DATE_TYPE_INPUT""INTERNAL_STATUS"
        /// <br/>"EXTERNAL_STATUS"
        /// <br/>"TYPE_IDENTIFICATION_DOCUMENT"
        /// <br/>"APPLICATION_TYPE","PERMIT_TYPE","MARITAL_STATUS","GENDER", etc.
        /// <br/>2. Входен параметър за извличане на Държави :"COUNTRIES"
        /// <br/>
        /// <br/>3. Входен параметър за извличане на Region (Области) :"REGION"
        /// <br/>
        /// <br/>4. Входен параметър за извличане на NKPD Code :"NKPD_CODE"
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetNomenclatures_output> GetNomenclaturesAsync(GetNomenclatures_input body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// isAlive
        /// </summary>
        /// <remarks>
        /// Операция за проверка на работоспособността на услугата
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive_output> IsAliveAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// isAlive
        /// </summary>
        /// <remarks>
        /// Операция за проверка на работоспособността на услугата
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsAlive_output> IsAliveAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// updateApplication
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateApplication_output> UpdateApplicationAsync(UpdateApplication_input body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// updateApplication
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateApplication_output> UpdateApplicationAsync(UpdateApplication_input body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// uploadDocument
        /// </summary>
        /// <remarks>
        /// Upload Documents for Application Documents
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UploadDocument_output> UploadDocumentAsync(UploadDocument_input body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// uploadDocument
        /// </summary>
        /// <remarks>
        /// Upload Documents for Application Documents
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UploadDocument_output> UploadDocumentAsync(UploadDocument_input body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// getRegionCities
        /// </summary>
        /// <remarks>
        /// Операция за извличане на населени места по въведен Регион (Област)
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetRegionCities_output> GetRegionCitiesAsync(GetRegionCities_input body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// getRegionCities
        /// </summary>
        /// <remarks>
        /// Операция за извличане на населени места по въведен Регион (Област)
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetRegionCities_output> GetRegionCitiesAsync(GetRegionCities_input body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// getDocumentsNomenclature
        /// </summary>
        /// <remarks>
        /// permitTypeValue стойност от операция getNomenclatures входен параметър PERMIT_TYPE, елемент code
        /// <br/>applicantTypeValue стойност от операция getNomenclatures входен параметър  ENTITY_TYPE, елемент code
        /// <br/>
        /// <br/>isComplaint стойност true / false
        /// <br/>
        /// <br/>isCancelRequest стойност true / false
        /// <br/>
        /// <br/>showAll стойност true / false , при true , се доставят всички видове документи за всички applicant and permit Type стойности
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetDocumentsNomenclature_output> GetDocumentsNomenclatureAsync(GetDocumentsNomenclature_input body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// getDocumentsNomenclature
        /// </summary>
        /// <remarks>
        /// permitTypeValue стойност от операция getNomenclatures входен параметър PERMIT_TYPE, елемент code
        /// <br/>applicantTypeValue стойност от операция getNomenclatures входен параметър  ENTITY_TYPE, елемент code
        /// <br/>
        /// <br/>isComplaint стойност true / false
        /// <br/>
        /// <br/>isCancelRequest стойност true / false
        /// <br/>
        /// <br/>showAll стойност true / false , при true , се доставят всички видове документи за всички applicant and permit Type стойности
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetDocumentsNomenclature_output> GetDocumentsNomenclatureAsync(GetDocumentsNomenclature_input body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// getEmployer
        /// </summary>
        /// <remarks>
        /// По въведен БУЛСТАТ на работодател, елемент identifierNumber, се доставят данни за работодателят от REGIX.Услуга (операция) от REGIX : Get Actual State V3
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetEmployer_output> GetEmployerAsync(GetEmployer_input body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// getEmployer
        /// </summary>
        /// <remarks>
        /// По въведен БУЛСТАТ на работодател, елемент identifierNumber, се доставят данни за работодателят от REGIX.Услуга (операция) от REGIX : Get Actual State V3
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetEmployer_output> GetEmployerAsync(GetEmployer_input body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// getBorderCrossingPoints
        /// </summary>
        /// <remarks>
        /// Операция за извличане на ГКПП, без входен параметър
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetBorderCrossingPoints_output> GetBorderCrossingPointsAsync(GetBorderCrossingPoints_input body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// getBorderCrossingPoints
        /// </summary>
        /// <remarks>
        /// Операция за извличане на ГКПП, без входен параметър
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetBorderCrossingPoints_output> GetBorderCrossingPointsAsync(GetBorderCrossingPoints_input body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// getDocumentContent
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetDocumentContent_output> GetDocumentContentAsync(GetDocumentContent_input body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// getDocumentContent
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="BlueCardCoreApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetDocumentContent_output> GetDocumentContentAsync(GetDocumentContent_input body, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceAddress
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("addressInfo")]
        public string AddressInfo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("kind")]
        public string Kind { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string Country { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("region")]
        public string Region { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string City { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("postalCode")]
        public string PostalCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("street")]
        public string Street { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("streetNo")]
        public string StreetNo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("quarter")]
        public string Quarter { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("buildingNo")]
        public string BuildingNo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("entrance")]
        public string Entrance { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("floor")]
        public string Floor { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apartment")]
        public string Apartment { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceApplication
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("applicationId")]
        public string ApplicationId { get; set; }

        /// <summary>
        /// Генерирано UUID на апликацията за референция при прикачване на документи
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("applicationUid")]
        public string ApplicationUid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("applicationType")]
        public string ApplicationType { get; set; }

        /// <summary>
        /// Тип разрешение
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("permitType")]
        public string PermitType { get; set; }

        /// <summary>
        /// Тип операция: - Ново
        /// <br/> - Продължаване (Удължаване)
        /// <br/> - Смяна на работодател (само за ВКТ и Сезонен)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("operationType")]
        public string OperationType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("statusDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StatusDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("internalStatus")]
        public string InternalStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("internalStatusDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? InternalStatusDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("registrationDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? RegistrationDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("applicant")]
        public ServiceEntity Applicant { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("subject")]
        public ServiceForeigner Subject { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("subjectLists")]
        public System.Collections.Generic.ICollection<ServiceForeigner> SubjectLists { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("employer")]
        public ServiceEmployer Employer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("documents")]
        public System.Collections.Generic.ICollection<ServiceDocument> Documents { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("purpose")]
        public string Purpose { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("residencePermitEuValidity")]
        public int ResidencePermitEuValidity { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("residencePermitCountry")]
        public string ResidencePermitCountry { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("residenceStartDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ResidenceStartDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("residenceEndDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ResidenceEndDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("position")]
        public string Position { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("positionType")]
        public string PositionType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("additionalInfo")]
        public string AdditionalInfo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contractDuration")]
        public int ContractDuration { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contractContinuation")]
        public bool ContractContinuation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("nkpdPosition")]
        public string NkpdPosition { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("qualification")]
        public string Qualification { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("specialty")]
        public string Specialty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("employmentAddress")]
        public ServiceAddress EmploymentAddress { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("educationType")]
        public string EducationType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("existingVisaType")]
        public string ExistingVisaType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("existingVisaExpirationDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExistingVisaExpirationDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("employmentStart")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EmploymentStart { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("registrationData")]
        public string RegistrationData { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("registrationTimeStamp")]
        public string RegistrationTimeStamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("registrationDataSignature")]
        public string RegistrationDataSignature { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permitExpiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PermitExpiryDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("employmentAddressMatch")]
        public bool EmploymentAddressMatch { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceApplicationShort
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("applicationId")]
        public string ApplicationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("applicationType")]
        public string ApplicationType { get; set; }

        /// <summary>
        /// Тип разрешение
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("permitType")]
        public string PermitType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("statusDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StatusDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("internalStatus")]
        public string InternalStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("internalStatusDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? InternalStatusDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("registrationDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? RegistrationDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("applicantIdentifierNumber")]
        public string ApplicantIdentifierNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("applicantName")]
        public string ApplicantName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("subjectUid")]
        public string SubjectUid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("subjectName")]
        public System.Collections.Generic.ICollection<string> SubjectName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("subjectNameCyrilic")]
        public System.Collections.Generic.ICollection<string> SubjectNameCyrilic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("employerIdentifierNumber")]
        public string EmployerIdentifierNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("employerName")]
        public string EmployerName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contractDuration")]
        public int ContractDuration { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contractContinuation")]
        public bool ContractContinuation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("employmentStart")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EmploymentStart { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permitExpiryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PermitExpiryDate { get; set; }

        /// <summary>
        /// ЛНЧ
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subjectFid")]
        public string SubjectFid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("subjectBirthDate")]
        public System.Collections.Generic.ICollection<System.DateTimeOffset?> SubjectBirthDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("subjectBirthDateTypeInput")]
        public string SubjectBirthDateTypeInput { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("subjectBirthDateYear")]
        public string SubjectBirthDateYear { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("subjectBirthDateMonth")]
        public string SubjectBirthDateMonth { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("subjectNationality")]
        public System.Collections.Generic.ICollection<string> SubjectNationality { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceBorderCrossingPoints
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceComplaint
    {

        [System.Text.Json.Serialization.JsonPropertyName("complaintId")]
        public string ComplaintId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("applicationId")]
        public string ApplicationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("statusDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StatusDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("internalStatus")]
        public string InternalStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("internalStatusDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? InternalStatusDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("complaintDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ComplaintDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("complainant")]
        public ServiceEntity Complainant { get; set; }

        /// <summary>
        /// Попълва се автоматично спрямо вида на заявлението (към МВР или към АЗ)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("institution")]
        public string Institution { get; set; }

        /// <summary>
        /// Коментар при пускане на жалбата
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("comment")]
        public string Comment { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("complaintResult")]
        public string ComplaintResult { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("documents")]
        public System.Collections.Generic.ICollection<ServiceDocument> Documents { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("complaintData")]
        public string ComplaintData { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("complaintTimeStamp")]
        public string ComplaintTimeStamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("complaintDataSignature")]
        public string ComplaintDataSignature { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceComplaintShort
    {

        [System.Text.Json.Serialization.JsonPropertyName("complaintId")]
        public string ComplaintId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("applicationId")]
        public string ApplicationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("statusDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StatusDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("internalStatus")]
        public string InternalStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("internalStatusDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? InternalStatusDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("complaintDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ComplaintDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("complainantIdentifierNumber")]
        public string ComplainantIdentifierNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("complainantName")]
        public string ComplainantName { get; set; }

        /// <summary>
        /// Попълва се автоматично спрямо вида на заявлението (към МВР или към АЗ)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("institution")]
        public string Institution { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("complaintResult")]
        public string ComplaintResult { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceContactInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPreferedContract")]
        public bool IsPreferedContract { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceDocument
    {

        [System.Text.Json.Serialization.JsonPropertyName("dbId")]
        public int DbId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cmisId")]
        public string CmisId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("documentType")]
        public string DocumentType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("documentCategory")]
        public string DocumentCategory { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("documentIdentifier")]
        public string DocumentIdentifier { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("uploadedDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? UploadedDate { get; set; }

        /// <summary>
        /// URL към съдържанието на документа
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("url")]
        public string Url { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isMandatory")]
        public bool IsMandatory { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("uploadedByUser")]
        public string UploadedByUser { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isOriginal")]
        public bool IsOriginal { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fileName")]
        public string FileName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mimeType")]
        public string MimeType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contentString")]
        public string ContentString { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("applicationUid")]
        public string ApplicationUid { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceDocumentsNomenclature
    {

        [System.Text.Json.Serialization.JsonPropertyName("documentCategoryName")]
        public string DocumentCategoryName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("documentCategoryValue")]
        public string DocumentCategoryValue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("documentTypeName")]
        public string DocumentTypeName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("documentTypeValue")]
        public string DocumentTypeValue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isMandatory")]
        public bool IsMandatory { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("validationStatus")]
        public int ValidationStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("rpaTask")]
        public string RpaTask { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceEmployer
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("identifierNumber")]
        public string IdentifierNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("identifiers")]
        public System.Collections.Generic.ICollection<ServiceIdDocument> Identifiers { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("identifiersLegalЕntity")]
        public System.Collections.Generic.ICollection<ServiceIdDocument> IdentifiersLegalЕntity { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public System.Collections.Generic.ICollection<ServiceAddress> Address { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactInfo")]
        public System.Collections.Generic.ICollection<ServiceContactInfo> ContactInfo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("preferedNotificationType")]
        public string PreferedNotificationType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("representative")]
        public System.Collections.Generic.ICollection<ServiceEntity> Representative { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("employeeCount")]
        public int EmployeeCount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("foreignEmployeeCount")]
        public int ForeignEmployeeCount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceEntity
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Added for the DEMO only!
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identifierNumber")]
        public string IdentifierNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("typeIdentifier")]
        public string TypeIdentifier { get; set; }

        /// <summary>
        /// Използва се при попълване на данни за Заявител.В случай на Упълномощено лице , със ЕИК/КОД ПО БУЛСТАТ.Където имаме от една страна Юридическо лице, от друга физическо лице.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("typeIdentifierRepresentative")]
        public string TypeIdentifierRepresentative { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fid")]
        public string Fid { get; set; }

        /// <summary>
        /// True , когато Entity съвпада със Foreigner иначе False
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("foreignerMatch")]
        public bool ForeignerMatch { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("employerMatch")]
        public bool EmployerMatch { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("identifiers")]
        public System.Collections.Generic.ICollection<ServiceIdDocument> Identifiers { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public System.Collections.Generic.ICollection<ServiceAddress> Address { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactInfo")]
        public System.Collections.Generic.ICollection<ServiceContactInfo> ContactInfo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("employer")]
        public ServiceEmployer Employer { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceForeigner
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }

        /// <summary>
        /// Генерирано ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("uid")]
        public string Uid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("nameCyrilic")]
        public string NameCyrilic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("identifiers")]
        public System.Collections.Generic.ICollection<ServiceIdDocument> Identifiers { get; set; }

        /// <summary>
        /// Номер на задгр. паспорт при заявление 5 - временна заетост
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identifier")]
        public string Identifier { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("typeIdentifier")]
        public string TypeIdentifier { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public System.Collections.Generic.ICollection<ServiceAddress> Address { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactInfo")]
        public System.Collections.Generic.ICollection<ServiceContactInfo> ContactInfo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("preferedNotificationType")]
        public string PreferedNotificationType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("birthDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? BirthDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("birthDateTypeInput")]
        public string BirthDateTypeInput { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("birthDateYear")]
        public string BirthDateYear { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("birthDateMonth")]
        public string BirthDateMonth { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("nationality")]
        public string Nationality { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maritalStatus")]
        public string MaritalStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        public string Gender { get; set; }

        /// <summary>
        /// ЛНЧ
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fid")]
        public string Fid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cityОfBirth")]
        public string CityОfBirth { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("entryDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EntryDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("entryPoint")]
        public string EntryPoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("visaType")]
        public string VisaType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("visaSerialNumber")]
        public string VisaSerialNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("visaExpirationDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? VisaExpirationDate { get; set; }

        /// <summary>
        /// цел на влизането в страната
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("purposeOfEnteringCountry")]
        public string PurposeOfEnteringCountry { get; set; }

        /// <summary>
        /// срок на пребиваване
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("termОfResidence")]
        public int TermОfResidence { get; set; }

        /// <summary>
        /// валидност на разрешението за пребиваване от първа държава членка
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validityResidencePermitFromFirstMemberState")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ValidityResidencePermitFromFirstMemberState { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("employmentReason")]
        public string EmploymentReason { get; set; }

        /// <summary>
        /// Продължителност на заетостта от
        /// <br/>Полето се използва за :Заявление за разрешение за краткосрочна заетост на хартиен носител (Приложимо за Заявление №5)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("durationOfEmploymentFrom")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DurationOfEmploymentFrom { get; set; }

        /// <summary>
        /// Продължителност на заетостта до
        /// <br/>Полето се използва за :Заявление за разрешение за краткосрочна заетост на хартиен носител (Приложимо за Заявление №5)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("durationOfEmploymentTo")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DurationOfEmploymentTo { get; set; }

        /// <summary>
        /// Длъжност при заявление 5 - временна заетост
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("position")]
        public string Position { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceIdDocument
    {

        [System.Text.Json.Serialization.JsonPropertyName("Identifier")]
        public string Identifier { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expirationDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpirationDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("issuedBy")]
        public string IssuedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("series")]
        public string Series { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("documentDescription")]
        public string DocumentDescription { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceReferenceData
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        public string DisplayName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Input schema for the operation createApplication
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateApplication_input
    {

        [System.Text.Json.Serialization.JsonPropertyName("application")]
        public ServiceApplication Application { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response schema of operation createApplication
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateApplication_output
    {

        [System.Text.Json.Serialization.JsonPropertyName("applicationId")]
        public string ApplicationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Input schema for the operation createComplaint
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateComplaint_input
    {

        [System.Text.Json.Serialization.JsonPropertyName("complaint")]
        public ServiceComplaint Complaint { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response schema of operation createComplaint
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateComplaint_output
    {

        [System.Text.Json.Serialization.JsonPropertyName("complaintId")]
        public string ComplaintId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Input schema for the operation getApplication
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetApplication_input
    {
        /// <summary>
        /// 240411154555"240605140428"
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("applicationId")]
        public string ApplicationId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response schema of operation getApplication
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetApplication_output
    {

        [System.Text.Json.Serialization.JsonPropertyName("application")]
        public ServiceApplication Application { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Input schema for the operation getBorderCrossingPoints
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetBorderCrossingPoints_input
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public string Data { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response schema of operation getBorderCrossingPoints
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetBorderCrossingPoints_output
    {

        [System.Text.Json.Serialization.JsonPropertyName("borderCrossingPoints")]
        public System.Collections.Generic.ICollection<ServiceBorderCrossingPoints> BorderCrossingPoints { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Input schema for the operation getComplaint
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetComplaint_input
    {

        [System.Text.Json.Serialization.JsonPropertyName("complaintId")]
        public string ComplaintId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response schema of operation getComplaint
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetComplaint_output
    {

        [System.Text.Json.Serialization.JsonPropertyName("complaint")]
        public ServiceComplaint Complaint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Input schema for the operation getDocumentContent
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDocumentContent_input
    {
        /// <summary>
        /// Идентификатор на прикачен документ в ECM системата
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cmisId")]
        public string CmisId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response schema of operation getDocumentContent
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDocumentContent_output
    {
        /// <summary>
        /// Base64 UTF String на съдържанието на документа
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contentString")]
        public string ContentString { get; set; }

        /// <summary>
        /// MimeType на документа
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mimeType")]
        public string MimeType { get; set; }

        /// <summary>
        /// Име на файла
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fileName")]
        public string FileName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Input schema for the operation getDocumentsNomenclature
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDocumentsNomenclature_input
    {

        [System.Text.Json.Serialization.JsonPropertyName("permitTypeValue")]
        public string PermitTypeValue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("applicantTypeValue")]
        public string ApplicantTypeValue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isComplaint")]
        public bool IsComplaint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isCancelRequest")]
        public bool IsCancelRequest { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("showAll")]
        public bool ShowAll { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response schema of operation getDocumentsNomenclature
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDocumentsNomenclature_output
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("documents")]
        public System.Collections.Generic.ICollection<ServiceDocumentsNomenclature> Documents { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Input schema for the operation getEmployer
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetEmployer_input
    {
        /// <summary>
        /// БУЛСТАТ на работодател
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identifierNumber")]
        public string IdentifierNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response schema of operation getEmployer
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetEmployer_output
    {

        [System.Text.Json.Serialization.JsonPropertyName("employer")]
        public ServiceEmployer Employer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Input schema for the operation getNomenclatures
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetNomenclatures_input
    {
        /// <summary>
        /// Пример за входен параметър за Reference Data :"LEGAL_FORM_TYPE"
        /// <br/>Пример за входен параметър за извличане на всички държави :"COUNTRIES"
        /// <br/>
        /// <br/>Пример за входен параметър за REGION (ОБЛАСТ)"REGION"
        /// <br/>Пример за входен параметър за НКПД Код"NKPD_CODE"
        /// <br/>Пример за входен параметър за VISA TYPE"VISA_TYPE"
        /// <br/>Пример за входен параметър за EXTERNAL_STATUS"EXTERNAL_STATUS"
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("referenceDataName")]
        public string ReferenceDataName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response schema of operation getNomenclatures
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetNomenclatures_output
    {

        [System.Text.Json.Serialization.JsonPropertyName("referenceData")]
        public System.Collections.Generic.ICollection<ServiceReferenceData> ReferenceData { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Input schema for the operation getRegionCities
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetRegionCities_input
    {

        [System.Text.Json.Serialization.JsonPropertyName("region")]
        public string Region { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response schema of operation getRegionCities
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetRegionCities_output
    {

        [System.Text.Json.Serialization.JsonPropertyName("regionCities")]
        public System.Collections.Generic.ICollection<string> RegionCities { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response schema of operation isAlive
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IsAlive_output
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Input schema for the operation listApplications
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListApplications_input
    {
        /// <summary>
        /// 121830616121904002
        /// <br/>131413749
        /// <br/>
        /// <br/>ЕГН/ЛНЧ
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identifierNumber")]
        public string IdentifierNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("firstRecord")]
        public int FirstRecord { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recordsPerPage")]
        public int RecordsPerPage { get; set; }

        /// <summary>
        /// БУЛСТАТ
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bulstat")]
        public string Bulstat { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response schema of operation listApplications
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListApplications_output
    {

        [System.Text.Json.Serialization.JsonPropertyName("applications")]
        public System.Collections.Generic.ICollection<ServiceApplicationShort> Applications { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("firstRecord")]
        public int FirstRecord { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastRecord")]
        public int LastRecord { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Input schema for the operation listComplaints
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListComplaints_input
    {

        [System.Text.Json.Serialization.JsonPropertyName("identifierNumber")]
        public string IdentifierNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response schema of operation listComplaints
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListComplaints_output
    {

        [System.Text.Json.Serialization.JsonPropertyName("complaints")]
        public System.Collections.Generic.ICollection<ServiceComplaintShort> Complaints { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Input schema for the operation updateApplication
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateApplication_input
    {
        /// <summary>
        /// 240607090326
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("applicationId")]
        public string ApplicationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("internalStatus")]
        public string InternalStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("registrationDataSignature")]
        public string RegistrationDataSignature { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("registrationTimeStamp")]
        public string RegistrationTimeStamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("documents")]
        public System.Collections.Generic.ICollection<ServiceDocument> Documents { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response schema of operation updateApplication
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateApplication_output
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Input schema for the operation uploadDocument
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UploadDocument_input
    {
        /// <summary>
        /// Идентификатор на вече регистрирано заявление
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("applicationId")]
        public string ApplicationId { get; set; }

        /// <summary>
        /// Временен идентификатор при все още не регистрирано заявление. Временният идентификатор трябва да е уникален. Може да се ползва този JS код за генериране:
        /// <br/>function getApplicationNumber(){    var dt = new Date();    var uuid = 'xxxx-xxxx-xxxx-xxxx-xxxx'.replace(/[xy]/g, function(c) {        var r = (dt + Math.random()*16)%16 | 0;        dt = Math.floor(dt/16);        return (c=='x' ? r :(r&amp;0x3|0x8)).toString(16);    });    return uuid.toUpperCase();}
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("applicationUid")]
        public string ApplicationUid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("document")]
        public ServiceDocument Document { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response schema of operation uploadDocument
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UploadDocument_output
    {

        [System.Text.Json.Serialization.JsonPropertyName("document")]
        public ServiceDocument Document { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Exception object describing error details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WpaServiceException
    {
        /// <summary>
        /// Exception code or Message ID of the exception.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string Code { get; set; }

        /// <summary>
        /// Message text of the exception.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// Message text parameters of the exception.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message_parameters")]
        public System.Collections.Generic.ICollection<string> Message_parameters { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cause")]
        public WpaServiceException Cause { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BlueCardCoreApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public BlueCardCoreApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BlueCardCoreApiException<TResult> : BlueCardCoreApiException
    {
        public TResult Result { get; private set; }

        public BlueCardCoreApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625