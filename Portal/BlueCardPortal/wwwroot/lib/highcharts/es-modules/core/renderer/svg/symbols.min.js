"use strict";import U from"../../Utilities.js";const{defined,isNumber,pick}=U;function arc(t,c,n,r,i){const a=[];if(i){var L=i.start||0,o=pick(i.r,n),r=pick(i.r,r||n),n=2e-4/Math.max(o,1),s=Math.abs((i.end||0)-L-2*Math.PI)<n,l=(i.end||0)-n,u=i.innerR,s=pick(i.open,s),d=Math.cos(L),p=Math.sin(L),M=Math.cos(l),h=Math.sin(l),n=pick(i.longArc,l-L-Math.PI<n?0:1);let e=["A",o,r,0,n,pick(i.clockwise,1),t+o*M,c+r*h];e.params={start:L,end:l,cx:t,cy:c},a.push(["M",t+o*d,c+r*p],e),defined(u)&&((e=["A",u,u,0,n,defined(i.clockwise)?1-i.clockwise:0,t+u*d,c+u*p]).params={start:l,end:L,cx:t,cy:c},a.push(s?["M",t+u*M,c+u*h]:["L",t+u*M,c+u*h],e)),s||a.push(["Z"])}return a}function callout(e,t,c,n,r){var i,a=Math.min(r&&r.r||0,c,n),L=a+6,o=r&&r.anchorX,r=r&&r.anchorY||0;const s=roundedRect(e,t,c,n,{r:a});return isNumber(o)&&(o<c&&0<o&&r<n&&0<r||(c-L<e+o?t+L<r&&r<t+n-L?s.splice(3,1,["L",e+c,r-6],["L",e+c+6,r],["L",e+c,r+6],["L",e+c,t+n-a]):o<c?(i=r<t+L,s.splice(i?2:5,0,["L",o,r],["L",e+c-a,i?t:t+n])):s.splice(3,1,["L",e+c,n/2],["L",o,r],["L",e+c,n/2],["L",e+c,t+n-a]):e+o<L?t+L<r&&r<t+n-L?s.splice(7,1,["L",e,r+6],["L",e-6,r],["L",e,r-6],["L",e,t+a]):0<o?(i=r<t+L,s.splice(i?1:6,0,["L",o,r],["L",e+a,i?t:t+n])):s.splice(7,1,["L",e,n/2],["L",o,r],["L",e,n/2],["L",e,t+a]):n<r&&o<c-L?s.splice(5,1,["L",o+6,t+n],["L",o,t+n+6],["L",o-6,t+n],["L",e+a,t+n]):r<0&&L<o&&s.splice(1,1,["L",o-6,t],["L",o,t-6],["L",o+6,t],["L",c-a,t]))),s}function circle(e,t,c,n){return arc(e+c/2,t+n/2,c/2,n/2,{start:.5*Math.PI,end:2.5*Math.PI,open:!1})}function diamond(e,t,c,n){return[["M",e+c/2,t],["L",e+c,t+n/2],["L",e+c/2,t+n],["L",e,t+n/2],["Z"]]}function rect(e,t,c,n,r){return r&&r.r?roundedRect(e,t,c,n,r):[["M",e,t],["L",e+c,t],["L",e+c,t+n],["L",e,t+n],["Z"]]}function roundedRect(e,t,c,n,r){r=r?.r||0;return[["M",e+r,t],["L",e+c-r,t],["A",r,r,0,0,1,e+c,t+r],["L",e+c,t+n-r],["A",r,r,0,0,1,e+c-r,t+n],["L",e+r,t+n],["A",r,r,0,0,1,e,t+n-r],["L",e,t+r],["A",r,r,0,0,1,e+r,t],["Z"]]}function triangle(e,t,c,n){return[["M",e+c/2,t],["L",e+c,t+n],["L",e,t+n],["Z"]]}function triangleDown(e,t,c,n){return[["M",e,t],["L",e+c,t],["L",e+c/2,t+n],["Z"]]}const Symbols={arc:arc,callout:callout,circle:circle,diamond:diamond,rect:rect,roundedRect:roundedRect,square:rect,triangle:triangle,"triangle-down":triangleDown};export default Symbols;