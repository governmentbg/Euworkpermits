@using BlueCardPortal.Core.Contracts
@using BlueCardPortal.Extensions
@using BlueCardPortal.Infrastructure.Constants
@using BlueCardPortal.Infrastructure.Contracts
@using BlueCardPortal.Infrastructure.Model.Application
@using EAuthIntegration.Models
@inject IUserContext userContext
@inject INomenclatureService nomenclatureService
@model ApplicantVM
@{
    var htmlFieldPrefix = ViewData.TemplateInfo.HtmlFieldPrefix;
    var displayForeigner = Model.ApplicantType == ENTITY_TYPE.Foreigner ? string.Empty : "display:none";
    var displayPerson = (Model.ApplicantType == ENTITY_TYPE.AuthorizedPerson || Model.ApplicantType == ENTITY_TYPE.Representative) ? string.Empty : "display:none";
    var displayPersonEgn = (Model.ApplicantType == ENTITY_TYPE.AuthorizedPerson || Model.ApplicantType == ENTITY_TYPE.Representative || Model.UicType == "EGN") ? string.Empty : "display:none";
    var displayPersonLnch = (Model.ApplicantType == ENTITY_TYPE.Foreigner || Model.UicType == "LNCH") ? string.Empty : "display:none";
    var applicantDisableOnPid = nomenclatureService.ApplicantDisableOnPid();
    var colCss = applicantDisableOnPid ? "col-6" : "col-3";
}
<div class="row mb-2 applicant-container">
    <div class="col-6">
        @Html.EditorFor(x => x.ApplicantType, "RadioButtonList", new { Ddl = ViewBag.ApplicantType_ddl, onchange = "ApplicantTypeChangeRadio(this)" })
    </div>
    @if (!applicantDisableOnPid)
    {
        <div class="col-3">
            @Html.EditorFor(x => x.UicType, "RadioButtonList", new { Ddl = ViewBag.UicType_ddl, onchange = "UicTypeChangeRadio(this)" })
        </div>
    }
    else
    {
         @Html.HiddenFor(x => x.UicType)
    }
    <div class="@colCss applicant-person-container applicant-egn-container" style="@displayPersonEgn">
        @Html.EditorFor(x => x.Egn, "StringNullable")
    </div>
    <div class="@colCss applicant-foreigner-container applicant-lnch-container" style="@displayPersonLnch">
        @Html.EditorFor(x => x.Lnch, "StringNullable")
    </div>
</div>
<div class="applicant-person-container" style="@displayPerson">
    @{
        ViewData.TemplateInfo.HtmlFieldPrefix = ViewData.TemplateInfo.HtmlFieldPrefix.CombineTemplatePrefix("Person");
        @await Html.PartialAsync("_ApplicantPerson", Model.Person, new ViewDataDictionary(ViewData) { { "ApplicantType", Model.ApplicantType } })
        ;
        ViewData.TemplateInfo.HtmlFieldPrefix = htmlFieldPrefix;
    }
</div>
<div class="applicant-foreigner-container" style="@displayForeigner">
    @{
        ViewData.TemplateInfo.HtmlFieldPrefix = ViewData.TemplateInfo.HtmlFieldPrefix.CombineTemplatePrefix("Foreigner");
        @await Html.PartialAsync("_Foreigner", Model.Foreigner, new ViewDataDictionary(ViewData) { { "HideID", true }, { "ApplicantType", Model.ApplicantType } })
        ;
        ViewData.TemplateInfo.HtmlFieldPrefix = htmlFieldPrefix;
    }
</div>

@{
    ViewData.TemplateInfo.HtmlFieldPrefix = htmlFieldPrefix;
}
