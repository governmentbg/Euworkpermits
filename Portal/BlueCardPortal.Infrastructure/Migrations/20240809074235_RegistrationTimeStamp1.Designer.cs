// <auto-generated />
using System;
using BlueCardPortal.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BlueCardPortal.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240809074235_RegistrationTimeStamp1")]
    partial class RegistrationTimeStamp1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BlueCardPortal.Infrastructure.Data.Models.Application.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Идентификатор");

                    b.Property<string>("ApplyNumber")
                        .HasColumnType("text")
                        .HasColumnName("apply_number")
                        .HasComment("Номер заявление от core системата");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_wrt")
                        .HasComment("Дата на последна промяна");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error")
                        .HasComment("Грешка върната от core системата");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status")
                        .HasComment("Статус");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasComment("Идентификатор на потребител");

                    b.HasKey("Id")
                        .HasName("pk_applications");

                    b.ToTable("applications", null, t =>
                        {
                            t.HasComment("Заявления");
                        });
                });

            modelBuilder.Entity("BlueCardPortal.Infrastructure.Data.Models.Application.ApplicationItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Идентификатор");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_id")
                        .HasComment("Идентификатор на заявление");

                    b.Property<string>("DataContent")
                        .HasColumnType("jsonb")
                        .HasColumnName("data_content")
                        .HasComment("Данни за раздел сериализирани в json");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_wrt")
                        .HasComment("Дата на последна промяна");

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("item_type_id")
                        .HasComment("Тип");

                    b.HasKey("Id")
                        .HasName("pk_application_items");

                    b.HasIndex("ApplicationId")
                        .HasDatabaseName("ix_application_items_application_id");

                    b.HasIndex("ItemTypeId")
                        .HasDatabaseName("ix_application_items_item_type_id");

                    b.ToTable("application_items", null, t =>
                        {
                            t.HasComment("Данни раздел от заявление");
                        });
                });

            modelBuilder.Entity("BlueCardPortal.Infrastructure.Data.Models.Application.ApplicationItemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasComment("Идентификатор");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("HtmlPrefix")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("html_prefix")
                        .HasComment("Html Prefix");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_en")
                        .HasComment("Наименование en");

                    b.Property<string>("PreviewName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("preview_name")
                        .HasComment("Наименование при преглед");

                    b.Property<string>("PreviewNameEn")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("preview_name_en")
                        .HasComment("Наименование en при преглед");

                    b.Property<string>("PreviewNameView")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("preview_name_view")
                        .HasComment("Име на view за преглед");

                    b.Property<int>("StepNum")
                        .HasColumnType("integer")
                        .HasColumnName("step_num")
                        .HasComment("Номер на стъпка");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type")
                        .HasComment("Тип на модела");

                    b.Property<string>("ViewName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("view_name")
                        .HasComment("Име на view");

                    b.HasKey("Id")
                        .HasName("pk_application_item_types");

                    b.ToTable("application_item_types", null, t =>
                        {
                            t.HasComment("Тип раздел от заявление");
                        });
                });

            modelBuilder.Entity("BlueCardPortal.Infrastructure.Data.Models.Application.ApplicationMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Идентификатор");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_id")
                        .HasComment("Идентификатор на заявление");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_wrt")
                        .HasComment("Дата на последна промяна");

                    b.Property<string>("RegistrationDataSignature")
                        .HasColumnType("text")
                        .HasColumnName("registration_data_signature");

                    b.Property<string>("Request")
                        .HasColumnType("jsonb")
                        .HasColumnName("data_content")
                        .HasComment("Данни за заявление сериализирани в json");

                    b.Property<string>("ResponseMessage")
                        .HasColumnType("text")
                        .HasColumnName("response_message")
                        .HasComment("Отговор");

                    b.Property<string>("ResponseStatus")
                        .HasColumnType("text")
                        .HasColumnName("response_status")
                        .HasComment("Отговор");

                    b.HasKey("Id")
                        .HasName("pk_application_messages");

                    b.HasIndex("ApplicationId")
                        .HasDatabaseName("ix_application_messages_application_id");

                    b.ToTable("application_messages", null, t =>
                        {
                            t.HasComment("Подписани данни от заявление изпратени към коре системата");
                        });
                });

            modelBuilder.Entity("BlueCardPortal.Infrastructure.Data.Models.Application.ApplicationUpdate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Идентификатор");

                    b.Property<string>("ApplyNumberFrom")
                        .HasColumnType("text")
                        .HasColumnName("apply_number_from")
                        .HasComment("Номер заявление от core системата");

                    b.Property<string>("DataContent")
                        .HasColumnType("jsonb")
                        .HasColumnName("data_content")
                        .HasComment("Данни за  жалба сериализирани в json");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_wrt")
                        .HasComment("Дата на последна промяна");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error")
                        .HasComment("Грешка върната от core системата");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status")
                        .HasComment("Статус");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasComment("Идентификатор на потребител");

                    b.HasKey("Id")
                        .HasName("pk_application_updates");

                    b.ToTable("application_updates", null, t =>
                        {
                            t.HasComment("Жалби");
                        });
                });

            modelBuilder.Entity("BlueCardPortal.Infrastructure.Data.Models.Common.EMail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Context")
                        .HasColumnType("text")
                        .HasColumnName("context");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("FailedAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("failed_attempts");

                    b.Property<string>("FailedAttemptsErrors")
                        .HasColumnType("text")
                        .HasColumnName("failed_attempts_errors");

                    b.Property<string>("FeedBackEmail")
                        .HasColumnType("text")
                        .HasColumnName("feed_back_email");

                    b.Property<string>("FeedBackName")
                        .HasColumnType("text")
                        .HasColumnName("feed_back_name");

                    b.Property<string>("MailTemplateName")
                        .HasColumnType("text")
                        .HasColumnName("mail_template_name");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_e_mails");

                    b.ToTable("e_mails", (string)null);
                });

            modelBuilder.Entity("BlueCardPortal.Infrastructure.Data.Models.Complaint.Complaint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Идентификатор");

                    b.Property<string>("ApplyNumberFrom")
                        .HasColumnType("text")
                        .HasColumnName("apply_number_from")
                        .HasComment("Номер заявление от core системата");

                    b.Property<string>("ComplaintNumber")
                        .HasColumnType("text")
                        .HasColumnName("complaint_number")
                        .HasComment("Номер жалба от core системата");

                    b.Property<string>("DataContent")
                        .HasColumnType("jsonb")
                        .HasColumnName("data_content")
                        .HasComment("Данни за  жалба сериализирани в json");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_wrt")
                        .HasComment("Дата на последна промяна");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error")
                        .HasComment("Грешка върната от core системата");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status")
                        .HasComment("Статус");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasComment("Идентификатор на потребител");

                    b.HasKey("Id")
                        .HasName("pk_complaints");

                    b.ToTable("complaints", null, t =>
                        {
                            t.HasComment("Жалби");
                        });
                });

            modelBuilder.Entity("BlueCardPortal.Infrastructure.Data.Models.Nomenclature.AdditionalColumn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("System identifier of additional column");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name")
                        .HasComment("Column name");

                    b.Property<long>("NomenclatureId")
                        .HasColumnType("bigint")
                        .HasColumnName("nomenclature_id")
                        .HasComment("FK Codeable concept identificator");

                    b.Property<string>("ValueBg")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("value_bg")
                        .HasComment("Column value in BG");

                    b.Property<string>("ValueEn")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("value_en")
                        .HasComment("Column value in EN");

                    b.HasKey("Id")
                        .HasName("pk_additional_columns");

                    b.HasIndex("NomenclatureId")
                        .HasDatabaseName("ix_additional_columns_nomenclature_id");

                    b.ToTable("additional_columns", "nomenclatures", t =>
                        {
                            t.HasComment("Additiona values for codeable concepts");
                        });
                });

            modelBuilder.Entity("BlueCardPortal.Infrastructure.Data.Models.Nomenclature.CodeableConcept", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Systsem identifer of codeable concept");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code")
                        .HasComment("Nomenclaure value identifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by")
                        .HasComment("Record created by");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("date")
                        .HasColumnName("date_from")
                        .HasComment("Start of the nomenclature validity");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("date")
                        .HasColumnName("date_to")
                        .HasComment("End of the nomenclature validity, never expires if NULL");

                    b.Property<Guid?>("LastUpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_by")
                        .HasComment("Record last updated by");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_on")
                        .HasComment("Record last updated on");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id")
                        .HasComment("FK for creating hierarchical nomenclatures");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type")
                        .HasComment("Nomenclaure identifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("value")
                        .HasComment("Nomenclature value in BG");

                    b.Property<string>("ValueEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("value_en")
                        .HasComment("Nomenclature value in EN");

                    b.HasKey("Id")
                        .HasName("pk_codeable_concepts");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_codeable_concepts_parent_id");

                    b.HasIndex(new[] { "Type", "Code", "DateFrom", "DateTo" }, "ix_codeable_concepts_type_code")
                        .HasDatabaseName("ix_codeable_concepts_type_code_date_from_date_to");

                    b.ToTable("codeable_concepts", "nomenclatures", t =>
                        {
                            t.HasComment("System nomenclatures");
                        });
                });

            modelBuilder.Entity("BlueCardPortal.Infrastructure.Data.Models.Nomenclature.NomenclatureType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasComment("Primary key");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description")
                        .HasComment("Type name or description");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type")
                        .HasComment("Nomenclature type");

                    b.HasKey("Id")
                        .HasName("pk_nomenclature_types");

                    b.ToTable("nomenclature_types", "nomenclatures", t =>
                        {
                            t.HasComment("Types of nomenclatures available to the system");
                        });
                });

            modelBuilder.Entity("BlueCardPortal.Infrastructure.Data.Models.SelfDenial.SelfDenial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Идентификатор");

                    b.Property<string>("ApplyNumberFrom")
                        .HasColumnType("text")
                        .HasColumnName("apply_number_from")
                        .HasComment("Номер заявление от core системата");

                    b.Property<string>("DataContent")
                        .HasColumnType("jsonb")
                        .HasColumnName("data_content")
                        .HasComment("Данни за  жалба сериализирани в json");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_wrt")
                        .HasComment("Дата на последна промяна");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error")
                        .HasComment("Грешка върната от core системата");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status")
                        .HasComment("Статус");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasComment("Идентификатор на потребител");

                    b.HasKey("Id")
                        .HasName("pk_self_denials");

                    b.ToTable("self_denials", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text")
                        .HasColumnName("friendly_name");

                    b.Property<string>("Xml")
                        .HasColumnType("text")
                        .HasColumnName("xml");

                    b.HasKey("Id")
                        .HasName("pk_data_protection_keys");

                    b.ToTable("data_protection_keys", (string)null);
                });

            modelBuilder.Entity("BlueCardPortal.Infrastructure.Data.Models.Application.ApplicationItem", b =>
                {
                    b.HasOne("BlueCardPortal.Infrastructure.Data.Models.Application.Application", "Application")
                        .WithMany("ApplicationItems")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_items_applications_application_id");

                    b.HasOne("BlueCardPortal.Infrastructure.Data.Models.Application.ApplicationItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_items_application_item_types_item_type_id");

                    b.Navigation("Application");

                    b.Navigation("ItemType");
                });

            modelBuilder.Entity("BlueCardPortal.Infrastructure.Data.Models.Application.ApplicationMessage", b =>
                {
                    b.HasOne("BlueCardPortal.Infrastructure.Data.Models.Application.Application", "Application")
                        .WithMany("ApplicationMessages")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_messages_applications_application_id");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("BlueCardPortal.Infrastructure.Data.Models.Nomenclature.AdditionalColumn", b =>
                {
                    b.HasOne("BlueCardPortal.Infrastructure.Data.Models.Nomenclature.CodeableConcept", "Nomenclature")
                        .WithMany("AdditionalColumns")
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_additional_columns_codeable_concepts_nomenclature_id");

                    b.Navigation("Nomenclature");
                });

            modelBuilder.Entity("BlueCardPortal.Infrastructure.Data.Models.Nomenclature.CodeableConcept", b =>
                {
                    b.HasOne("BlueCardPortal.Infrastructure.Data.Models.Nomenclature.CodeableConcept", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_codeable_concepts_codeable_concepts_parent_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("BlueCardPortal.Infrastructure.Data.Models.Application.Application", b =>
                {
                    b.Navigation("ApplicationItems");

                    b.Navigation("ApplicationMessages");
                });

            modelBuilder.Entity("BlueCardPortal.Infrastructure.Data.Models.Nomenclature.CodeableConcept", b =>
                {
                    b.Navigation("AdditionalColumns");
                });
#pragma warning restore 612, 618
        }
    }
}
